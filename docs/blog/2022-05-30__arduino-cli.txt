Arduino CLI Induced Flow
Once upon a time I was intimidated by the command line. Today, I get annoyed when I can't use Vim.


🐰


Progress is happening. In 2014, prior to becoming a software engineer, I started programming ColorClock using Processing to map the system time to a colored eclipse displayed on my computer screen. Six years later, in 2020, I dabbled in this project a little more to entertain myself during the early months of the pandemic. I cringed at my previous work as I refactored the code into functions. And today, I’m refactoring further, making the code more modular and porting it into C++ / Arduino.


🐰


Since I picked up ColorClock again about a month ago (May 2022), I have been coding at work using Vim because it improves my workflow. My fingers never have to leave the keys so it's easier for me to become deeply immersed in the task at hand. But the Arduino IDE does not have a Vim extension. Going back to this coding environment was painful 😣


🐰


The time had come to explore the Arduino Command Line Interface (CLI). I was holding back because though I had become proficient in command line computing, a part of me felt intimidated again.


🐰


Despite my hesitation to explore the Arduino CLI, the drive to improve my development workflow motivated me to just RTFM. And so I did. And now I'm done with the Arduino IDE. Because the Arduino CLI is working 🌻beautifully🌻


🐰


This past weekend I found my flow again. Now I can code, compile, and upload my program to the Arduino board without ever letting my fingers leave the keyboard 🥳





Glossary
CLI - command line interface


IDE - integrated development environment


RTFM - read the friendly manual


Vim - a command line text editor with a steep learning curve that makes many people upset and can drastically improve your workflow if you are committed to practice